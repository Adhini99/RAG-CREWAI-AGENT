# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-1l7zC3zEb88gQfZVPljA-nn514Vs0Ce

# **Agentic RAG Using CrewAI & LangChain**
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install crewai==0.28.8 crewai_tools==0.1.6 langchain_community==0.0.29 sentence-transformers langchain-groq --quiet

# Install a compatible version of numpy
!pip install numpy==1.26.4 --quiet

from langchain_openai import ChatOpenAI
import os
from crewai_tools import PDFSearchTool
from langchain_community.tools.tavily_search import TavilySearchResults
from crewai_tools  import tool
from crewai import Crew
from crewai import Task
from crewai import Agent

import os

# Set the API key
os.environ['GROQ_API_KEY'] = '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'

llm = ChatOpenAI(
    openai_api_base="https://api.groq.com/openai/v1",
    openai_api_key=os.environ['GROQ_API_KEY'],
    model_name="llama3-8b-8192",
    temperature=0.1,
    max_tokens=1000,
)

llm = ChatOpenAI(
    openai_api_base="https://api.groq.com/openai/v1",
    openai_api_key=os.environ['GROQ_API_KEY'],
    model_name="llama3-8b-8192",
    temperature=0.1,
    max_tokens=1000,
)

import requests

pdf_url = 'https://proceedings.neurips.cc/paper_files/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf'
response = requests.get(pdf_url)

with open('attenstion_is_all_you_need.pdf', 'wb') as file:
    file.write(response.content)

!pip install langchain_huggingface langchain-core==0.1.53 --quiet

rag_tool = PDFSearchTool(pdf='attenstion_is_all_you_need.pdf',
    config=dict(
        llm=dict(
            provider="groq", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama3-8b-8192",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="huggingface", # or openai, ollama, ...
            config=dict(
                model="BAAI/bge-small-en-v1.5",
                #task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)

rag_tool.run("How did self-attention mechanism evolve in large language models?")

import os

# Set the Tavily API key
os.environ['TAVILY_API_KEY'] = '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'

web_search_tool = TavilySearchResults(k=3)

web_search_tool.run("What is self-attention mechansim in large language models?")

@tool
def router_tool(question):
  """Router Function"""
  if 'self-attention' in question:
    return 'vectorstore'
  else:
    return 'web_search'

Router_Agent = Agent(
  role='Router',
  goal='Route user question to a vectorstore or web search',
  backstory=(
    "You are an expert at routing a user question to a vectorstore or web search."
    "Use the vectorstore for questions on concept related to Retrieval-Augmented Generation."
    "You do not need to be stringent with the keywords in the question related to these topics. Otherwise, use web-search."
  ),
  verbose=True,
  allow_delegation=False,
  llm=llm,
)

Retriever_Agent = Agent(
role="Retriever",
goal="Use the information retrieved from the vectorstore to answer the question",
backstory=(
    "You are an assistant for question-answering tasks."
    "Use the information present in the retrieved context to answer the question."
    "You have to provide a clear concise answer."
),
verbose=True,
allow_delegation=False,
llm=llm,
)

Grader_agent =  Agent(
  role='Answer Grader',
  goal='Filter out erroneous retrievals',
  backstory=(
    "You are a grader assessing relevance of a retrieved document to a user question."
    "If the document contains keywords related to the user question, grade it as relevant."
    "It does not need to be a stringent test.You have to make sure that the answer is relevant to the question."
  ),
  verbose=True,
  allow_delegation=False,
  llm=llm,
)

hallucination_grader = Agent(
    role="Hallucination Grader",
    goal="Filter out hallucination",
    backstory=(
        "You are a hallucination grader assessing whether an answer is grounded in / supported by a set of facts."
        "Make sure you meticulously review the answer and check if the response provided is in alignmnet with the question asked"
    ),
    verbose=True,
    allow_delegation=False,
    llm=llm,
)

answer_grader = Agent(
    role="Answer Grader",
    goal="Filter out hallucination from the answer.",
    backstory=(
        "You are a grader assessing whether an answer is useful to resolve a question."
        "Make sure you meticulously review the answer and check if it makes sense for the question asked"
        "If the answer is relevant generate a clear and concise response."
        "If the answer gnerated is not relevant then perform a websearch using 'web_search_tool'"
    ),
    verbose=True,
    allow_delegation=False,
    llm=llm,
)

"""

# Defining Tasks"""

router_task = Task(
    description=("Analyse the keywords in the question {question}"
    "Based on the keywords decide whether it is eligible for a vectorstore search or a web search."
    "Return a single word 'vectorstore' if it is eligible for vectorstore search."
    "Return a single word 'websearch' if it is eligible for web search."
    "Do not provide any other premable or explaination."
    ),
    expected_output=("Give a binary choice 'websearch' or 'vectorstore' based on the question"
    "Do not provide any other premable or explaination."),
    agent=Router_Agent,
    tools=[router_tool],
)

retriever_task = Task(
    description=("Based on the response from the router task extract information for the question {question} with the help of the respective tool."
    "Use the web_serach_tool to retrieve information from the web in case the router task output is 'websearch'."
    "Use the rag_tool to retrieve information from the vectorstore in case the router task output is 'vectorstore'."
    ),
    expected_output=("You should analyse the output of the 'router_task'"
    "If the response is 'websearch' then use the web_search_tool to retrieve information from the web."
    "If the response is 'vectorstore' then use the rag_tool to retrieve information from the vectorstore."
    "Return a claer and consise text as response."),
    agent=Retriever_Agent,
    context=[router_task],
   #tools=[retriever_tool],
)

grader_task = Task(
    description=("Based on the response from the retriever task for the quetion {question} evaluate whether the retrieved content is relevant to the question."
    ),
    expected_output=("Binary score 'yes' or 'no' score to indicate whether the document is relevant to the question"
    "You must answer 'yes' if the response from the 'retriever_task' is in alignment with the question asked."
    "You must answer 'no' if the response from the 'retriever_task' is not in alignment with the question asked."
    "Do not provide any preamble or explanations except for 'yes' or 'no'."),
    agent=Grader_agent,
    context=[retriever_task],
)

hallucination_task = Task(
    description=("Based on the response from the grader task for the quetion {question} evaluate whether the answer is grounded in / supported by a set of facts."),
    expected_output=("Binary score 'yes' or 'no' score to indicate whether the answer is sync with the question asked"
    "Respond 'yes' if the answer is in useful and contains fact about the question asked."
    "Respond 'no' if the answer is not useful and does not contains fact about the question asked."
    "Do not provide any preamble or explanations except for 'yes' or 'no'."),
    agent=hallucination_grader,
    context=[grader_task],
)

answer_task = Task(
    description=("Based on the response from the hallucination task for the quetion {question} evaluate whether the answer is useful to resolve the question."
    "If the answer is 'yes' return a clear and concise answer."
    "If the answer is 'no' then perform a 'websearch' and return the response"),
    expected_output=("Return a clear and concise response if the response from 'hallucination_task' is 'yes'."
    "Perform a web search using 'web_search_tool' and return ta clear and concise response only if the response from 'hallucination_task' is 'no'."
    "Otherwise respond as 'Sorry! unable to find a valid response'."),
    context=[hallucination_task],
    agent=answer_grader,
    #tools=[answer_grader_tool],
)

"""# Define a flow for the use case"""

rag_crew = Crew(
    agents=[Router_Agent, Retriever_Agent, Grader_agent, hallucination_grader, answer_grader],
    tasks=[router_task, retriever_task, grader_task, hallucination_task, answer_task],
    verbose=True,

)

"""
# Ask any query"""

inputs ={"question":"How does self-attention mechanism help large language models?"}

"""# Kick off the agent pipeline"""

result = rag_crew.kickoff(inputs=inputs)

print(result)

"""# Task
Create a Streamlit application that takes a user question as input, processes it using a CrewAI agent, and displays the final answer.

## Extract and refactor code

### Subtask:
Identify the essential code from the notebook needed for the Streamlit app and refactor it into functions or a class for better organization.
"""

# Commented out IPython magic to ensure Python compatibility.
# # prompt: Create a Streamlit application that takes a user question as input, processes it using a CrewAI agent, and displays the final answer.
# 
# %%writefile app.py
# import streamlit as st
# from google.colab import drive
# # drive.mount('/content/drive') # This is not needed in a typical Streamlit app deployment
# from langchain_openai import ChatOpenAI
# import os
# from crewai_tools import PDFSearchTool
# from langchain_community.tools.tavily_search import TavilySearchResults
# from crewai_tools  import tool
# from crewai import Crew
# from crewai import Task
# from crewai import Agent
# import requests
# import tempfile
# 
# # Install necessary libraries (might need to run this in your environment setup, not directly in the app.py file)
# # !pip install crewai==0.28.8 crewai_tools==0.1.6 langchain_community==0.0.29 sentence-transformers langchain-groq --quiet
# # !pip install numpy==1.26.4 --quiet
# # !pip install langchain_huggingface langchain-core==0.1.53 --quiet
# 
# # Set environment variables
# # Replace with your actual keys or use Streamlit secrets
# os.environ['GROQ_API_KEY'] = os.getenv('GROQ_API_KEY', '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')
# os.environ['TAVILY_API_KEY'] = os.getenv('TAVILY_API_KEY', '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')
# 
# 
# def initialize_llm():
#     """Initializes and returns the language model."""
#     llm = ChatOpenAI(
#         openai_api_base="https://api.groq.com/openai/v1",
#         openai_api_key=os.environ['GROQ_API_KEY'],
#         model_name="llama3-8b-8192",
#         temperature=0.1,
#         max_tokens=1000,
#     )
#     return llm
# 
# def setup_tools():
#     """Sets up and returns the tools used by the agents."""
#     # Download and save the PDF
#     pdf_url = 'https://proceedings.neurips.cc/paper_files/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf'
#     try:
#         response = requests.get(pdf_url)
#         # Use a temporary file to store the PDF
#         with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as temp_pdf:
#             temp_pdf.write(response.content)
#             pdf_path = temp_pdf.name
#     except Exception as e:
#         st.error(f"Error downloading PDF: {e}")
#         return None, None
# 
#     rag_tool = PDFSearchTool(
#         pdf=pdf_path,
#         config=dict(
#             llm=dict(
#                 provider="groq",
#                 config=dict(
#                     model="llama3-8b-8192",
#                 ),
#             ),
#             embedder=dict(
#                 provider="huggingface",
#                 config=dict(
#                     model="BAAI/bge-small-en-v1.5",
#                 ),
#             ),
#         )
#     )
# 
#     web_search_tool = TavilySearchResults(k=3)
# 
#     @tool
#     def router_tool(question):
#         """Router Function to decide between vectorstore and web search."""
#         if 'self-attention' in question:
#             return 'vectorstore'
#         else:
#             return 'web_search'
# 
#     return rag_tool, web_search_tool, router_tool, pdf_path
# 
# def create_agents(llm, rag_tool, web_search_tool, router_tool):
#     """Creates and returns the CrewAI agents."""
#     Router_Agent = Agent(
#         role='Router',
#         goal='Route user question to a vectorstore or web search',
#         backstory=(
#           "You are an expert at routing a user question to a vectorstore or web search."
#           "Use the vectorstore for questions on concepts related to the 'Attention is All You Need' paper."
#           "Otherwise, use web-search."
#         ),
#         verbose=True,
#         allow_delegation=False,
#         llm=llm,
#         tools=[router_tool] # Add the router tool to the agent
#     )
# 
#     Retriever_Agent = Agent(
#         role="Retriever",
#         goal="Use the information retrieved from the vectorstore or web search to answer the question",
#         backstory=(
#             "You are an assistant for question-answering tasks."
#             "Use the information present in the retrieved context to answer the question."
#             "You have to provide a clear concise answer."
#         ),
#         verbose=True,
#         allow_delegation=False,
#         llm=llm,
#         tools=[rag_tool, web_search_tool] # Add both retrieval tools
#     )
# 
#     Grader_agent =  Agent(
#         role='Answer Grader',
#         goal='Filter out erroneous retrievals',
#         backstory=(
#           "You are a grader assessing relevance of a retrieved document to a user question."
#           "If the document contains keywords related to the user question, grade it as relevant."
#           "It does not need to be a stringent test.You have to make sure that the answer is relevant to the question."
#         ),
#         verbose=True,
#         allow_delegation=False,
#         llm=llm,
#     )
# 
#     hallucination_grader = Agent(
#         role="Hallucination Grader",
#         goal="Filter out hallucination",
#         backstory=(
#             "You are a hallucination grader assessing whether an answer is grounded in / supported by a set of facts."
#             "Make sure you meticulously review the answer and check if the response provided is in alignment with the question asked"
#         ),
#         verbose=True,
#         allow_delegation=False,
#         llm=llm,
#     )
# 
#     answer_grader = Agent(
#         role="Answer Grader",
#         goal="Filter out hallucination from the answer.",
#         backstory=(
#             "You are a grader assessing whether an answer is useful to resolve a question."
#             "Make sure you meticulously review the answer and check if it makes sense for the question asked"
#             "If the answer is relevant generate a clear and concise response."
#             "If the answer generated is not relevant then perform a websearch using 'web_search_tool'"
#         ),
#         verbose=True,
#         allow_delegation=False,
#         llm=llm,
#         tools=[web_search_tool] # Add web search tool for fallback
#     )
# 
#     return Router_Agent, Retriever_Agent, Grader_agent, hallucination_grader, answer_grader
# 
# def create_tasks(Router_Agent, Retriever_Agent, Grader_agent, hallucination_grader, answer_grader):
#     """Creates and returns the CrewAI tasks."""
#     router_task = Task(
#         description=(
#             "Analyse the keywords in the question {question}. "
#             "Based on the keywords decide whether it is eligible for a vectorstore search or a web search. "
#             "Return a single word 'vectorstore' if it is eligible for vectorstore search. "
#             "Return a single word 'websearch' if it is eligible for web search. "
#             "Do not provide any other preamble or explanation."
#         ),
#         expected_output=(
#             "Give a binary choice 'websearch' or 'vectorstore' based on the question. "
#             "Do not provide any other preamble or explanation."
#         ),
#         agent=Router_Agent,
#     )
# 
#     retriever_task = Task(
#         description=(
#             "Based on the response from the router task, extract information for the question {question} with the help of the respective tool. "
#             "If the router task output is 'websearch', use the web_search_tool to retrieve information from the web. "
#             "If the router task output is 'vectorstore', use the rag_tool to retrieve information from the vectorstore."
#         ),
#         expected_output=(
#             "You should analyse the output of the 'router_task'. "
#             "If the response is 'websearch' then use the web_search_tool to retrieve information from the web. "
#             "If the response is 'vectorstore' then use the rag_tool to retrieve information from the vectorstore. "
#             "Return a clear and concise text as response."
#         ),
#         agent=Retriever_Agent,
#         context=[router_task],
#     )
# 
#     grader_task = Task(
#         description=(
#             "Based on the response from the retriever task for the question {question}, evaluate whether the retrieved content is relevant to the question."
#         ),
#         expected_output=(
#             "Binary score 'yes' or 'no' score to indicate whether the document is relevant to the question. "
#             "You must answer 'yes' if the response from the 'retriever_task' is in alignment with the question asked. "
#             "You must answer 'no' if the response from the 'retriever_task' is not in alignment with the question asked. "
#             "Do not provide any preamble or explanations except for 'yes' or 'no'."
#         ),
#         agent=Grader_agent,
#         context=[retriever_task],
#     )
# 
#     hallucination_task = Task(
#         description=("Based on the response from the grader task for the question {question}, evaluate whether the answer is grounded in / supported by a set of facts."),
#         expected_output=(
#             "Binary score 'yes' or 'no' score to indicate whether the answer is in sync with the question asked. "
#             "Respond 'yes' if the answer is useful and contains facts about the question asked. "
#             "Respond 'no' if the answer is not useful and does not contain facts about the question asked. "
#             "Do not provide any preamble or explanations except for 'yes' or 'no'."
#         ),
#         agent=hallucination_grader,
#         context=[grader_task],
#     )
# 
#     answer_task = Task(
#         description=(
#             "Based on the response from the hallucination task for the question {question}, evaluate whether the answer is useful to resolve the question. "
#             "If the response from the hallucination task is 'yes', return a clear and concise answer based on the previous tasks' context. "
#             "If the response from the hallucination task is 'no', then perform a 'websearch' using the web_search_tool and return the response."
#         ),
#         expected_output=(
#             "Return a clear and concise response if the response from 'hallucination_task' is 'yes'. "
#             "Perform a web search using 'web_search_tool' and return a clear and concise response only if the response from 'hallucination_task' is 'no'. "
#             "Otherwise respond as 'Sorry! unable to find a valid response'."
#         ),
#         context=[hallucination_task],
#         agent=answer_grader,
#     )
# 
#     return router_task, retriever_task, grader_task, hallucination_task, answer_task
# 
# def run_crewai_process(question):
#     """Runs the CrewAI process with the given question."""
#     llm = initialize_llm()
#     rag_tool, web_search_tool, router_tool, pdf_path = setup_tools()
# 
#     if rag_tool is None or web_search_tool is None or router_tool is None:
#         return "Failed to set up tools."
# 
#     Router_Agent, Retriever_Agent, Grader_agent, hallucination_grader, answer_grader = create_agents(llm, rag_tool, web_search_tool, router_tool)
#     router_task, retriever_task, grader_task, hallucination_task, answer_task = create_tasks(Router_Agent, Retriever_Agent, Grader_agent, hallucination_grader, answer_grader)
# 
#     rag_crew = Crew(
#         agents=[Router_Agent, Retriever_Agent, Grader_agent, hallucination_grader, answer_grader],
#         tasks=[router_task, retriever_task, grader_task, hallucination_task, answer_task],
#         verbose=True,
#     )
# 
#     inputs = {"question": question}
#     result = rag_crew.kickoff(inputs=inputs)
# 
#     # Clean up the temporary PDF file
#     if os.path.exists(pdf_path):
#         os.remove(pdf_path)
# 
#     return result
# 
# # Streamlit App
# st.title("CrewAI Agentic RAG")
# 
# user_question = st.text_input("Enter your question:")
# 
# if st.button("Get Answer"):
#     if user_question:
#         with st.spinner("Processing your question..."):
#             answer = run_crewai_process(user_question)
#             st.subheader("Answer:")
#             st.write(answer)
#     else:
#         st.warning("Please enter a question.")
# 
#